# Scoring calibration for Domain Services pattern v1
# This file contains the scoring rubrics used during code evaluation
# Pattern definition: patterns/application/domain-services/v1.yaml

pattern_ref:
  name: "Domain Services"
  version: "v1"

tactic_scoring:
  - tactic_id: "stateless-services"
    scoring_rubric:
      5: "All services completely stateless except injected dependencies"
      4: "One service has negligible state"
      3: "Multiple services with instance state"
      2: "Most services stateful"
      1: "Services maintain request state across calls"
      0: "Not applicable (no services)"

  - tactic_id: "service-suffix"
    scoring_rubric:
      5: "All services named with 'Service' suffix"
      4: "One service missing suffix"
      3: "Multiple services with inconsistent naming"
      2: "Few services follow naming convention"
      1: "No naming convention"
      0: "Not applicable"

  - tactic_id: "services-in-application"
    scoring_rubric:
      5: "All services in application/services/ directory"
      4: "One service in wrong location"
      3: "Multiple services misplaced"
      2: "Services scattered across layers"
      1: "No organization"
      0: "Not applicable"

  - tactic_id: "use-for-cross-aggregate"
    scoring_rubric:
      5: "Cross-aggregate logic appropriately placed in services"
      4: "Mostly in services, one case in aggregate"
      3: "Some cross-aggregate logic in wrong place"
      2: "Most cross-aggregate logic in aggregates"
      1: "No services, aggregates know about each other"
      0: "Not applicable (single aggregate system)"

  - tactic_id: "use-for-external-validation"
    scoring_rubric:
      5: "All external validations in services via ports"
      4: "One external validation in wrong place"
      3: "Some external validations in aggregates"
      2: "Most external validations not in services"
      1: "Aggregates access external systems directly"
      0: "Not applicable (no external validations)"

  - tactic_id: "injectable-services"
    scoring_rubric:
      5: "All services marked with @injectable()"
      4: "One service missing decorator"
      3: "Multiple services not injectable"
      2: "Most services not using DI"
      1: "No dependency injection"
      0: "Not applicable (not using DI)"

  - tactic_id: "inject-dependencies"
    scoring_rubric:
      5: "All dependencies injected via constructor with @inject"
      4: "One dependency not properly injected"
      3: "Mix of injection and hardcoding"
      2: "Most dependencies hardcoded"
      1: "No injection"
      0: "Not applicable"

  - tactic_id: "pure-functions-preferred"
    scoring_rubric:
      5: "Calculation services are pure functions, deterministic"
      4: "Mostly pure, one minor side effect"
      3: "Some pure functions, some with side effects"
      2: "Most services have side effects"
      1: "No pure functions, all services stateful"
      0: "Not applicable (no calculation services)"

  - tactic_id: "return-domain-types"
    scoring_rubric:
      5: "Services return domain types, value objects, or domain results"
      4: "Mostly domain types, one infrastructure type leak"
      3: "Mix of domain and infrastructure types"
      2: "Primarily infrastructure types"
      1: "Returns database records or API responses"
      0: "Not applicable"

  - tactic_id: "comprehensive-tests"
    scoring_rubric:
      5: "All services have comprehensive unit tests using fakes"
      4: "One service missing tests"
      3: "Multiple services without tests"
      2: "Most services lack tests"
      1: "No service tests"
      0: "Not applicable"