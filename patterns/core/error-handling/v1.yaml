pattern_name: "Error Handling"
version: "v1"
domain: "Architecture"

goal: |
  Establish a consistent, type-safe approach to error handling across all
  layers. Distinguish between domain errors (business rule violations),
  application errors (not found, validation), and infrastructure errors
  (network, database). Enable proper HTTP status code mapping and maintain
  clear error boundaries.

guiding_policy: |
  Use typed error classes extending Error base class. Domain errors extend
  DomainError and represent business rule violations. Application errors
  represent operational failures (NotFound, Unauthorized). Map errors to
  HTTP responses at the infrastructure boundary using an error mapper.
  Each error type has meaningful name and message.

tactics:
  - id: "domain-error-base-class"
    name: "Use DomainError base class for domain errors"
    priority: critical
    description: "All domain business rule violations extend DomainError in domain/errors/"

  - id: "application-errors"
    name: "Application errors for operational failures"
    priority: critical
    description: "NotFound, Unauthorized errors in application/errors/ for operational issues"

  - id: "descriptive-error-names"
    name: "Error classes with descriptive names"
    priority: critical
    description: "Error class names describe the error: OccupierNotFoundError, UserAlreadyExistsError"

  - id: "set-error-name"
    name: "Set error name property in constructor"
    priority: critical
    description: "Constructor sets this.name to error class name for proper error identification"

  - id: "error-mapper"
    name: "Error mapper for HTTP response conversion"
    priority: critical
    description: "DomainErrorMapper in infrastructure maps errors to HTTP status codes and responses"

  - id: "domain-errors-in-domain"
    name: "Domain errors in domain/errors/ directory"
    priority: important
    description: "All DomainError subclasses in domain layer"

  - id: "app-errors-in-application"
    name: "Application errors in application/errors/"
    priority: important
    description: "Application layer errors (NotFound, etc.) in application/errors/"

  - id: "meaningful-messages"
    name: "Provide meaningful error messages"
    priority: important
    description: "Error messages include context (IDs, field names) to aid debugging"

  - id: "catch-at-boundaries"
    name: "Catch errors at layer boundaries"
    priority: important
    description: "Lambda handlers catch errors and use mapper to convert to HTTP responses"

  - id: "preserve-error-chain"
    name: "Preserve error chain with cause"
    priority: optional
    description: "When wrapping errors, pass original as cause for debugging"

  - id: "log-before-mapping"
    name: "Log errors before mapping to HTTP"
    priority: optional
    description: "Console.error or logger before mapping for debugging"

constraints:
  - rule: "Business rule violations MUST throw DomainError"
    description: "Domain layer throws DomainError subclasses, not generic Error"
    exceptions:
      - "Infrastructure errors (database, network) use appropriate types"
    evaluation: "deterministic"

  - rule: "Error classes MUST set name property"
    description: "Constructor must set this.name for error identification"
    exceptions: []
    evaluation: "deterministic"

  - rule: "Domain errors MUST be in domain/errors/"
    description: "DomainError subclasses located in domain layer"
    exceptions: []
    evaluation: "deterministic"

  - rule: "Application errors MUST be in application/errors/"
    description: "Application operational errors in application layer"
    exceptions: []
    evaluation: "deterministic"

  - rule: "HTTP responses MUST be created via error mapper"
    description: "Infrastructure uses DomainErrorMapper, not inline status code logic"
    exceptions:
      - "Simple success responses don't need mapper"
    evaluation: "llm_judge"

  - rule: "Error messages MUST include context"
    description: "Error messages include IDs, field names, or other context"
    exceptions:
      - "Security-sensitive errors may limit detail in production"
    evaluation: "llm_judge"

related_patterns:
  - "DDD Aggregates"
  - "Application Architecture"
  - "Infrastructure & API"

anti_patterns:
  - name: "Generic Error Throwing"
    description: "Throwing new Error() instead of typed domain errors"
  - name: "Inline HTTP Mapping"
    description: "Lambda handlers directly mapping errors to status codes instead of using mapper"
  - name: "Error in Wrong Layer"
    description: "Domain errors in application layer or vice versa"
  - name: "Swallowed Errors"
    description: "Catching errors without logging or re-throwing"

references:
  - "Error Handling in TypeScript"
  - "REST API Error Response Standards"