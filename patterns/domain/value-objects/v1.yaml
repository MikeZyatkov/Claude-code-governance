pattern_name: "Value Objects"
version: "v1"
domain: "Domain-Driven Design"

goal: |
  Encapsulate domain concepts that are defined by their attributes rather than
  identity. Ensure immutability and enforce invariants through validation at
  construction time. Replace primitive obsession with rich domain types that
  express business meaning.

guiding_policy: |
  Value objects are immutable objects identified by their values, not by identity.
  Two value objects with the same attributes are considered equal. They must
  validate their invariants at construction time and expose no setters. Use
  private constructors with static factory methods for creation, ensuring no
  invalid value object can exist in the system.

tactics:
  - id: "private-constructor"
    name: "Use private constructor with static factory method"
    priority: critical
    description: "Constructor is private, creation only via static create() method that validates invariants"

  - id: "immutable-fields"
    name: "All fields must be readonly"
    priority: critical
    description: "Use readonly keyword for all private fields to enforce immutability at compile time"

  - id: "validate-at-creation"
    name: "Validate all invariants in static factory method"
    priority: critical
    description: "Static create() method validates all business rules before constructing the value object"

  - id: "no-setters"
    name: "No setter methods, only getters"
    priority: critical
    description: "Value objects expose only getters for their private fields, no mutation methods"

  - id: "structural-equality"
    name: "Implement equals() method for structural equality"
    priority: important
    description: "Provide equals() method that compares all fields for value-based equality"

  - id: "throw-domain-errors"
    name: "Throw DomainError on validation failure"
    priority: important
    description: "Use DomainError (not generic Error) for invariant violations during creation"

  - id: "encapsulate-behavior"
    name: "Encapsulate behavior related to the value"
    priority: important
    description: "Value objects can have methods that operate on their data (calculations, queries) but cannot mutate state"

  - id: "toJSON-serialization"
    name: "Implement toJSON() for serialization"
    priority: optional
    description: "Provide toJSON() method to support JSON serialization of the value object"

  - id: "replace-primitives"
    name: "Replace primitive types with value objects"
    priority: optional
    description: "Don't pass raw strings/numbers for domain concepts, wrap in value objects (Email, Money, DateRange)"

constraints:
  - rule: "Value objects MUST be immutable"
    description: "All fields readonly, no setter methods, no mutation operations"
    exceptions: []
    evaluation: "deterministic"  # Can check for readonly keyword and setter methods

  - rule: "Constructor MUST be private"
    description: "Only static factory methods can create instances to ensure validation"
    exceptions:
      - "Protected constructor if inheritance is needed"
    evaluation: "deterministic"

  - rule: "Static factory MUST validate invariants before construction"
    description: "All business rules checked in create() method, throw DomainError on violation"
    exceptions: []
    evaluation: "llm_judge"

  - rule: "Value objects MUST implement structural equality"
    description: "equals() method compares all fields, not reference equality"
    exceptions: []
    evaluation: "llm_judge"

  - rule: "Value objects MUST NOT have identity"
    description: "No id field, equality based on attributes not identity"
    exceptions: []
    evaluation: "llm_judge"

related_patterns:
  - "DDD Aggregates"
  - "Error Handling"

anti_patterns:
  - name: "Mutable Value Object"
    description: "Value object with setter methods or non-readonly fields"
  - name: "Public Constructor"
    description: "Constructor public, allowing creation of invalid value objects"
  - name: "Primitive Obsession"
    description: "Passing raw strings/numbers instead of value objects for domain concepts"
  - name: "Identity-based Equality"
    description: "Using reference equality instead of structural equality"

references:
  - "Evans, Eric. Domain-Driven Design (Value Objects chapter)"
  - "Vernon, Vaughn. Implementing Domain-Driven Design"
  - "Fowler, Martin. ValueObject (martinfowler.com/bliki/ValueObject.html)"